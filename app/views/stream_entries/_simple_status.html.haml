.status.light
  .status__header
    .status__meta
      = link_to TagManager.instance.url_for(status), class: 'status__relative-time u-url u-uid', target: stream_link_target, rel: 'noopener' do
        %time.time-ago{ datetime: status.created_at.iso8601, title: l(status.created_at) }= l(status.created_at)
      %data.dt-published{ value: status.created_at.to_time.iso8601 }

    = link_to TagManager.instance.url_for(status.account), class: 'status__display-name p-author h-card', target: stream_link_target, rel: 'noopener' do
      .status__avatar
        %div
          = image_tag status.account.avatar(:original), width: 48, height: 48, alt: '', class: 'u-photo'
      %span.display-name
        %strong.p-name.emojify= display_name(status.account)
        %span= acct(status.account)

  .status__content.p-name.emojify<
    - if status.spoiler_text?
      %p{ style: 'margin-bottom: 0' }<
        %span.p-summary> #{Formatter.instance.format_spoiler(status)}&nbsp;
        %a.status__content__spoiler-link{ href: '#' }= t('statuses.show_more')
    .e-content{ lang: status.language, style: "display: #{status.spoiler_text? ? 'none' : 'block'}; direction: #{rtl_status?(status) ? 'rtl' : 'ltr'}" }= Formatter.instance.format(status, custom_emojify: true)

  - unless status.media_attachments.empty?
    - if status.media_attachments.first.video?
      - video = status.media_attachments.first
      %div{ data: { component: 'Video', props: Oj.dump(src: video.file.url(:original), preview: video.file.url(:small), sensitive: status.sensitive?, width: 610, height: 343) }}
    - else
      %div{ data: { component: 'MediaGallery', props: Oj.dump(height: 343, sensitive: status.sensitive?, 'autoPlayGif': current_account&.user&.setting_auto_play_gif, media: status.media_attachments.map { |a| ActiveModelSerializers::SerializableResource.new(a, serializer: REST::MediaAttachmentSerializer).as_json }) }}
